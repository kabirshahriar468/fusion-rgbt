# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv10 object detection model. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov10n.yaml' will call yolov10.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]

ch: 4

backbone:
  # [from, repeats, module, args]
  - [ -1, 1, Silence, [ ] ]  # 0-P1/2
  - [ 0, 1, SilenceChannel, [ 0,3 ] ]  # 0-P1/2
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, SCDown, [512, 3, 2]] # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, SCDown, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, C2f, [1024, True]]

  - [ 0, 1, SilenceChannel, [ 3,4 ] ]  # 11-P1/2
  - [ -1, 1, Conv, [ 64, 3, 2 ] ] # 12-P1/2
  - [ -1, 1, Conv, [ 128, 3, 2 ] ] # 13-P2/4
  - [ -1, 3, C2f, [ 128, True ] ]
  - [ -1, 1, Conv, [ 256, 3, 2 ] ] # 15-P3/8
  - [ -1, 6, C2f, [ 256, True ] ]
  - [ -1, 1, SCDown, [ 512, 3, 2 ] ] # 17-P4/16
  - [ -1, 6, C2f, [ 512, True ] ]
  - [ -1, 1, SCDown, [ 1024, 3, 2 ] ] # 19-P5/32
  - [ -1, 3, C2f, [ 1024, True ] ]

  - [[6, 16], 1, Concat, [1]]  # cat backbone P3   21
  - [[8, 18], 1, Concat, [1]]  # cat backbone P4   22
  - [[10, 20], 1, Concat, [1]]  # cat backbone P5    23

  - [-1, 1, SPPF, [1024, 5]] # 24
  - [-1, 1, PSA, [1024]] # 25

# YOLOv10.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 22], 1, Concat, [1]] # cat backbone P4  27
  - [-1, 3, C2f, [512]] # 28

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1,21], 1, Concat, [1]] # cat backbone P3
  - [-1, 3, C2f, [256]] # 31 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 28], 1, Concat, [1]] # cat head P4
  - [-1, 3, C2f, [512]] # 34 (P4/16-medium)

  - [-1, 1, SCDown, [512, 3, 2]]
  - [[-1, 25], 1, Concat, [1]] # cat head P5
  - [-1, 3, C2fCIB, [1024, True, True]] # 37 (P5/32-large)

  - [[31, 34, 37], 1, v10Detect, [nc]] # Detect(P3, P4, P5)
